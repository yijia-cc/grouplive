// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package dep

import (
	"database/sql"
	"github.com/yijia-cc/grouplive/auth/db/dao"
	"github.com/yijia-cc/grouplive/auth/idgen"
	"github.com/yijia-cc/grouplive/auth/routing"
	"github.com/yijia-cc/grouplive/auth/rpc"
	"github.com/yijia-cc/grouplive/auth/tm"
	"github.com/yijia-cc/grouplive/auth/tx"
	"google.golang.org/grpc"
	"net/http"
)

// Injectors from wire.go:

func InitRoutingServer(jwtSigningKey JWTSigningKey, caesarCipherOffset CaesarCipherOffset, sqlDB *sql.DB) *http.ServeMux {
	localTimer := tm.NewLocalTimer()
	uuidGenerator := idgen.NewUUIDGenerator()
	safeTransactionFactory := tx.NewSafeTransactionFactory(sqlDB)
	userSQL := dao.NewUserSQL(sqlDB)
	permissionBindingSQL := dao.NewPermissionBindingSQL(sqlDB)
	serveMux := newRoutingServer(localTimer, uuidGenerator, safeTransactionFactory, userSQL, jwtSigningKey, caesarCipherOffset, permissionBindingSQL)
	return serveMux
}

func InitGRPCServer(jwtSigningKey JWTSigningKey, caesarCipherOffset CaesarCipherOffset, sqlDB *sql.DB) *grpc.Server {
	localTimer := tm.NewLocalTimer()
	uuidGenerator := idgen.NewUUIDGenerator()
	safeTransactionFactory := tx.NewSafeTransactionFactory(sqlDB)
	userSQL := dao.NewUserSQL(sqlDB)
	permissionBindingSQL := dao.NewPermissionBindingSQL(sqlDB)
	server := newGRPCServer(localTimer, uuidGenerator, safeTransactionFactory, userSQL, jwtSigningKey, caesarCipherOffset, permissionBindingSQL)
	return server
}

// wire.go:

type JWTSigningKey string

type CaesarCipherOffset int

func newGRPCServer(timer tm.Timer, idGenerator idgen.IDGenerator, txFactory tx.TransactionFactory, userDao dao.User, jwtSigningKey JWTSigningKey, caesarCipherOffset CaesarCipherOffset, permissionBinding dao.PermissionBinding) *grpc.Server {
	return rpc.NewServer(timer, idGenerator, txFactory, userDao, string(jwtSigningKey), int(caesarCipherOffset), permissionBinding)
}

func newRoutingServer(timer tm.Timer, idGenerator idgen.IDGenerator, txFactory tx.TransactionFactory, userDao dao.User, jwtSigningKey JWTSigningKey, caesarCipherOffset CaesarCipherOffset, permissionBinding dao.PermissionBinding) *http.ServeMux {
	return routing.NewServer(timer, idGenerator, txFactory, userDao, string(jwtSigningKey), int(caesarCipherOffset), permissionBinding)
}
