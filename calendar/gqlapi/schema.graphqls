schema {
    query: Query
    mutation: Mutation
}

type Query {
    """
    Revise API to utilize graphql nest & nested parameters
    https://graphql.org/learn/schema/#arguments
    """
    amenityTypes: [AmenityType!]!
    amenityType(id: ID!): AmenityType!
    reservations: [Reservation!]!
}

type Mutation {
    makeReservation(reservation: ReservationInput!): Reservation!
    confirmReservation(id: ID!): Void
    cancelReservation(id: ID!): Void
    updateReservation(reservation: ReservationInput!): Reservation!

    addAmenityType(amenityType: AmenityTypeInput!): Void
    deleteAmenityType(id: ID!): Void
    updateAmenityType(amenityType: AmenityTypeInput!): Void

    addAmenity(amenity: AmenityInput!): Void
    deleteAmenity(id: ID!): Void
    updateAmenity(amenity: AmenityInput!): Void
}

input ReservationInput {
    reservationId: ID
    amenityId: ID!
    timeRange: TimeRangeInput!
}

input AmenityFilterInput {
    timeRange: TimeRangeInput
}

input AmenityTypeInput {
    id: ID
    title: String
    description: String
    thumbnailUrl: String
}

input AmenityInput {
    id: ID
    name: String
    type: AmenityTypeInput!
    operationalHours: [TimeRangeInput!]!
}

type AmenityType {
    id: ID!
    title: String
    description: String
    thumbnailUrl: String

    amenities(filter: AmenityFilterInput): [Amenity!]!
}

type Reservation {
    id: ID!
    amenity: Amenity!
    holdDuration: Duration
    timeSlot: TimeSlot!
}

type Amenity {
    id: ID!
    name: String
    type: AmenityType!
    schedule(weekStart: Time): Schedule
    operationalHours: [TimeRange!]!
}

type Schedule {
    id: ID!
    weekStart: Time!
    previous: Schedule
    next: Schedule
    timeSlots: [TimeSlot!]!
}

type TimeSlot {
    type: TimeSlotType!
    timeRange: TimeRange!
}

input TimeRangeInput  {
    start: Time!
    end: Time!
}

type TimeRange {
    start: Time!
    end: Time!
}

enum TimeSlotType {
    AVAILABLE
    BOOKED_BY_OTHERS
    BOOKED_BY_ME
}

scalar Time
scalar Duration
scalar Void
